import UIKit

// Задача 1
// ----------------
/*
 История:
 Вы разрабатываете спутник для полета на Европу (спутник Юпитера).
 В вашей команде два ученых по космодинамике. Вы даете каждому из них задачу расcчитать
 количество топлива для достижения спутником цели.

 Данные, которые они получают — это вес спутника и длина полета. Они должны вам предоставить
 свои алгоритмы расчета расхода топлива (это ваши замыкания). А вы по готовности алгоритмов
 делаете обработку данных и сравниваете результат (это ваша функция).

 Алгоритм выполнения
 - Написать функцию с входящим параметром — замыкание (тип указан выше). Функция должна выводить в консоль результат выполнения замыкания.
 - Написать два замыкания (тип указан выше). Внутри должна быть математическая операция (на ваш выбор) над входящими значениями.
 - Вызвать функцию для первого замыкания и потом для второго замыкания.
 - Выполнить задание, не сокращая синтаксис языка.
*/
let formula1 = { (weight: Double, distance: Double) -> Double in
    return weight * distance * 100
}
let formula2 = { (weight: Double, distance: Double) ->Double in
    return weight * distance * 0.01
}


func printResultFor(weight: Double, distance: Double, formula: (Double,Double) -> Double ) -> Void {
    let result: Double = formula(weight,distance)
    print("Результат расчета для  weight= \(weight),  distance=\(distance) равен \(result)")
}

//weight
//distance
print("Задача 1")
print("----------------------")
printResultFor(weight: 2.5, distance: 1000.01, formula: formula1)
printResultFor(weight: 2.5, distance: 1000.01, formula: formula2)
print("----------------------")

// Задача 2
// ----------------
/*
 История:
 В вашем конструкторском бюро случилось ЧП и все компьютеры вышли из строя,
 но последние алгоритмы вы помните. Вы намерены добраться до ближайшего компьютера
 в соседнем селе и восстановить из своей памяти нужные данные.
 Ваша задача запомнить максимально краткую форму записи алгоритмов, чтобы все не смешалось в голове.

 Алгоритм выполнения
 - Представить задание 1 в сокращенном виде (см. пункт лекции "Сокращения для замыканий").
 
 */

func printResultFor2(_ weight: Double, _ distance: Double, _ formula: (Double,Double) -> Double ) -> Void {
    let result: Double = formula(weight,distance)
    print("Результат расчета для  weight= \(weight),  distance=\(distance) равен \(result)")
}

print("Задача 2")
print("----------------------")
printResultFor2(2.5, 1000.01) {$0*$1*100}
printResultFor2(2.5, 1000.01) {$0*$1*0.01}
print("----------------------")

// Задача 3
// ----------------
/*
 История:
 Пока вы добирались до села с компьютером, вам пришла в голову мысль своего алгоритма. Вы решили использовать свою функцию для проверки гипотезы и стали набирать алгоритм прямо в ней (реализация замыкания вместо параметра).

 Алгоритм выполнения
 Вызвать функцию из задания 1, определив ей замыкание самостоятельно (не передавая).
 
 */

print("Задача 3")
print("----------------------")
printResultFor(weight: 2.5, distance: 1000.01) {a1,a2 in a1*a2*5}
printResultFor(weight: 2.5, distance: 1000.01) {$0*$1*5}
print("----------------------")

/*

 Объяснить, куда и почему исчезло ключевое слово ('param' - в примере) для параметра.
 
 Пример:
 func example(param: () -> Void) {
     // ...
 }
     
 example {
     // ...
 }

 Ответ:
 В вызове функции example единственный параметр и он же последный, значит при вызове можно использовать форму "последующего замыкания",
 т.е. замыкание можно написать вне круглых скобок функции. В этом случае ярлык параметра замыкания писать не нужно.
 */


